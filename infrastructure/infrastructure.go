package infrastructure

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"os"
	"tgbot/models"
)

const notFound string = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
const badTerm string = "–ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ä–∞–≤–µ–Ω —Å—Ä–æ–∫—É —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è. –î–∞—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∑–∞–ø—Ä–æ—à–µ–Ω—ã —Å–≤–µ–¥–µ–Ω–∏—è, –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ –ø–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞"

func OSAGORequest(vin string) ([]string, error) {

	baseUrl := "https://api-cloud.ru/api/rsa.php"

	params := url.Values{}
	params.Add("type", "osago")
	params.Add("vin", vin)
	params.Add("token", os.Getenv("API_TOKEN"))

	fullUrl := baseUrl + "?" + params.Encode()

	resp, err := http.Get(fullUrl)
	if err != nil {
		log.Println("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–ø–∏:", err)
		return []string{}, err
	}

	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Println("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", err)
		return []string{}, err
	}

	log.Println("–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:", resp.StatusCode)

	var osagoResponse models.OsagoResponse
	err = json.Unmarshal(body, &osagoResponse)
	if err != nil {
		log.Println("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–º–∞—Ä—à–∞–ª–ª–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–ø–∏:", err)
		return []string{}, err
	}

	result := makeResult(osagoResponse)

	log.Println("–û—Ç–≤–µ—Ç –æ—Ç –ê–ü–ò –û–°–ê–ì–û –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")

	return result, nil

}

func makeResult(osagoResponse models.OsagoResponse) []string {

	result := make([]string, 4, 4)
	osago := osagoResponse.Rez[0]

	result[0] = fmt.Sprintf(`
	üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–∏—Å–µ –û–°–ê–ì–û:
		‚Ä¢ –°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä: %s %s
		‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è: %s
		‚Ä¢ –°—Ç–∞—Ç—É—Å: %s`,
		osago.Seria,
		osago.Nomer,
		osago.OrgOsago,
		osago.Status)

	if osago.Term == badTerm {
		result[1] = fmt.Sprintf(`
	üìÖ –°—Ä–æ–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è:
		‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª–∏—Å–∞ –û–°–ê–ì–û –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–∫–æ–Ω—á–µ–Ω`)
	} else {
		result[1] = fmt.Sprintf(`
	üìÖ –°—Ä–æ–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è:
		‚Ä¢ –ü–µ—Ä–∏–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: %s
		‚Ä¢ –ù–∞—á–∞–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: %s
		‚Ä¢ –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: %s
		‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞: —Å %s –ø–æ %s`,
			osago.Term,
			osago.TermStart,
			osago.TermStop,
			osago.StartPolis,
			osago.StopPolis,
		)
	}

	if osago.RegNum == "" {
		result[2] = fmt.Sprintf(`
	üöó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:
		‚Ä¢ –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å: %s
		‚Ä¢ –ì–æ—Å. –Ω–æ–º–µ—Ä: %s`,
			osago.BrandModel,
			"–ù–µ –Ω–∞–π–¥–µ–Ω")
	} else {
		result[2] = fmt.Sprintf(`
	üöó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:
		‚Ä¢ –ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å: %s
		‚Ä¢ –ì–æ—Å. –Ω–æ–º–µ—Ä: %s`,
			osago.BrandModel,
			osago.RegNum)
	}

	result[3] = fmt.Sprintf("üåç –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ –ë–µ–ª–∞—Ä—É—Å—å: %s", osago.DopBelarus)

	return result

}
